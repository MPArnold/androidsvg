/** Maven Publish Helper */

apply plugin: 'maven-publish'

def  version = '1.4.1'
//version = '1.x-SNAPSHOT'

def  libraryName = 'androidsvgCOLOR'
def  libraryDescription = 'AndroidSVG with colour control.'

def  artifactIdAAR = 'androidsvg-aar'
def  artifactIdJAR = 'androidsvg'
def  group = 'nz.gpskaihu'

def  developerId = 'MPArnold'
def  developerName = 'Matt Arnold'
def  developerEmail = 'koparapara@gmail.com'

def  siteUrl = 'https://github.com/MPArnold/androidsvgCOLOR'
def  gitUrl = 'https://github.com/MPArnold/androidsvgCOLOR.git'

def  licenseName = 'The Apache Software License, Version 2.0'
def  licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

//def  releaseRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
//def  snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            if (variant.hasProperty('javaCompileProvider')) {
                // Android 3.3.0+
                owner.classpath += variant.javaCompileProvider.get().classpath
            } else {
                owner.classpath += variant.javaCompile.classpath
            }
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set("javadoc")
    from androidJavadocs.destinationDir
}

project.artifacts {
    archives androidJavadocsJar, androidSourcesJar
}

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                //groupId 'cz.adaptech.android'
                //artifactId 'tesseract4android'
                groupId = group				        // eg pkgName
                artifactId = artifactIdAAR			// ???
                // Derive version from ?????
                version = android.defaultConfig.versionName

                artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    final root = asNode()
                    // Attribute "scm" (and probably also "name") is required in order to be valid pom for publishing on JCenter.
                    // Bintray works without them. Maven Central requires in addition few more attributes.
                    root.appendNode('name', libraryDescription)
                    root.appendNode('scm').appendNode('url', siteUrl)

                    final dependenciesNode = root.appendNode('dependencies')
                    ext.addDependency = { dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is not transitive, we should force exclude all its dependencies from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionsNode = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { rule ->
                                final exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
    // https://stackoverflow.com/questions/28805607
    //generateReleaseBuildConfig.enabled = false
}